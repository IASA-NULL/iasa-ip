  
Color = (function () {
  var cls = function Color() {
    };
  return cls;
}) ();
exports.Color = Color;


  
Point = (function () {
  var cls = function Point() {
    };
  return cls;
}) ();
exports.Point = Point;


  
Rect = (function () {
  var cls = function Rect() {
    };
  return cls;
}) ();
exports.Rect = Rect;


_JumpListSystemGroupKind = function () {
  this.none = 0;
  this.frequent = 1;
  this.recent = 2;
}
exports.JumpListSystemGroupKind = new _JumpListSystemGroupKind();

_JumpListItemKind = function () {
  this.arguments = 0;
  this.separator = 1;
}
exports.JumpListItemKind = new _JumpListItemKind();

_TileOptions = function () {
  this.none = 0;
  this.showNameOnLogo = 1;
  this.showNameOnWideLogo = 2;
  this.copyOnDeployment = 3;
}
exports.TileOptions = new _TileOptions();

_TileSize = function () {
  this.default = 0;
  this.square30x30 = 1;
  this.square70x70 = 2;
  this.square150x150 = 3;
  this.wide310x150 = 4;
  this.square310x310 = 5;
  this.square71x71 = 6;
  this.square44x44 = 7;
}
exports.TileSize = new _TileSize();

_ForegroundText = function () {
  this.dark = 0;
  this.light = 1;
}
exports.ForegroundText = new _ForegroundText();

JumpListItem = (function () {
  var cls = function JumpListItem() {
    this.logo = new Object();
    this.groupName = new String();
    this.displayName = new String();
    this.description = new String();
    this.arguments = new String();
    this.kind = new JumpListItemKind();
    this.removedByUser = new Boolean();
  };
  

  cls.createWithArguments = function createWithArguments(arguments, displayName) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="arguments" type="String">A param.</param>
    /// <param name="displayName" type="String">A param.</param>
    /// <returns type="JumpListItem" />
    /// </signature>
    return new JumpListItem();
  }


  cls.createSeparator = function createSeparator() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="JumpListItem" />
    /// </signature>
    return new JumpListItem();
  }


  return cls;
}) ();
exports.JumpListItem = JumpListItem;

JumpList = (function () {
  var cls = function JumpList() {
    this.systemGroupKind = new JumpListSystemGroupKind();
    this.items = new Object();
  };
  

  cls.prototype.saveAsync = function saveAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.loadCurrentAsync = function loadCurrentAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }



  cls.isSupported = function isSupported() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  return cls;
}) ();
exports.JumpList = JumpList;

SecondaryTileVisualElements = (function () {
  var cls = function SecondaryTileVisualElements() {
    this.square150x150Logo = new Object();
    this.showNameOnWide310x150Logo = new Boolean();
    this.showNameOnSquare310x310Logo = new Boolean();
    this.showNameOnSquare150x150Logo = new Boolean();
    this.foregroundText = new ForegroundText();
    this.backgroundColor = new Object();
    this.wide310x150Logo = new Object();
    this.square70x70Logo = new Object();
    this.square310x310Logo = new Object();
    this.square30x30Logo = new Object();
    this.square71x71Logo = new Object();
    this.square44x44Logo = new Object();
  };
  

  return cls;
}) ();
exports.SecondaryTileVisualElements = SecondaryTileVisualElements;

SecondaryTile = (function () {
  var cls = function SecondaryTile() {
    this.shortName = new String();
    this.logo = new Object();
    this.tileId = new String();
    this.lockScreenDisplayBadgeAndTileText = new Boolean();
    this.lockScreenBadgeLogo = new Object();
    this.arguments = new String();
    this.foregroundText = new ForegroundText();
    this.displayName = new String();
    this.backgroundColor = new Object();
    this.wideLogo = new Object();
    this.tileOptions = new TileOptions();
    this.smallLogo = new Object();
    this.roamingEnabled = new Boolean();
    this.phoneticName = new String();
    this.visualElements = new SecondaryTileVisualElements();
  };
  
var cls = function SecondaryTile(tileId, displayName, arguments, square150x150Logo, desiredSize) {
      this.shortName = new String();
      this.logo = new Object();
      this.tileId = new String();
      this.lockScreenDisplayBadgeAndTileText = new Boolean();
      this.lockScreenBadgeLogo = new Object();
      this.arguments = new String();
      this.foregroundText = new ForegroundText();
      this.displayName = new String();
      this.backgroundColor = new Object();
      this.wideLogo = new Object();
      this.tileOptions = new TileOptions();
      this.smallLogo = new Object();
      this.roamingEnabled = new Boolean();
      this.phoneticName = new String();
      this.visualElements = new SecondaryTileVisualElements();
};

var cls = function SecondaryTile(tileId, shortName, displayName, arguments, tileOptions, logoReference) {
      this.shortName = new String();
      this.logo = new Object();
      this.tileId = new String();
      this.lockScreenDisplayBadgeAndTileText = new Boolean();
      this.lockScreenBadgeLogo = new Object();
      this.arguments = new String();
      this.foregroundText = new ForegroundText();
      this.displayName = new String();
      this.backgroundColor = new Object();
      this.wideLogo = new Object();
      this.tileOptions = new TileOptions();
      this.smallLogo = new Object();
      this.roamingEnabled = new Boolean();
      this.phoneticName = new String();
      this.visualElements = new SecondaryTileVisualElements();
};

var cls = function SecondaryTile(tileId, shortName, displayName, arguments, tileOptions, logoReference, wideLogoReference) {
      this.shortName = new String();
      this.logo = new Object();
      this.tileId = new String();
      this.lockScreenDisplayBadgeAndTileText = new Boolean();
      this.lockScreenBadgeLogo = new Object();
      this.arguments = new String();
      this.foregroundText = new ForegroundText();
      this.displayName = new String();
      this.backgroundColor = new Object();
      this.wideLogo = new Object();
      this.tileOptions = new TileOptions();
      this.smallLogo = new Object();
      this.roamingEnabled = new Boolean();
      this.phoneticName = new String();
      this.visualElements = new SecondaryTileVisualElements();
};

var cls = function SecondaryTile(tileId) {
      this.shortName = new String();
      this.logo = new Object();
      this.tileId = new String();
      this.lockScreenDisplayBadgeAndTileText = new Boolean();
      this.lockScreenBadgeLogo = new Object();
      this.arguments = new String();
      this.foregroundText = new ForegroundText();
      this.displayName = new String();
      this.backgroundColor = new Object();
      this.wideLogo = new Object();
      this.tileOptions = new TileOptions();
      this.smallLogo = new Object();
      this.roamingEnabled = new Boolean();
      this.phoneticName = new String();
      this.visualElements = new SecondaryTileVisualElements();
};


  cls.prototype.requestCreateAsync = function requestCreateAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }

cls.prototype.requestCreateAsync = function requestCreateAsync(invocationPoint, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="invocationPoint" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.requestCreateForSelectionAsync = function requestCreateForSelectionAsync(selection, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="selection" type="Object">A param.</param>
    /// </signature>
  }

cls.prototype.requestCreateForSelectionAsync = function requestCreateForSelectionAsync(selection, preferredPlacement, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="selection" type="Object">A param.</param>
    /// <param name="preferredPlacement" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.requestDeleteAsync = function requestDeleteAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }

cls.prototype.requestDeleteAsync = function requestDeleteAsync(invocationPoint, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="invocationPoint" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.requestDeleteForSelectionAsync = function requestDeleteForSelectionAsync(selection, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="selection" type="Object">A param.</param>
    /// </signature>
  }

cls.prototype.requestDeleteForSelectionAsync = function requestDeleteForSelectionAsync(selection, preferredPlacement, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="selection" type="Object">A param.</param>
    /// <param name="preferredPlacement" type="Number">A param.</param>
    /// </signature>
  }


  cls.prototype.updateAsync = function updateAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  cls.findAllAsync = function findAllAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }

cls.findAllAsync = function findAllAsync(applicationId, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="applicationId" type="String">A param.</param>
    /// </signature>
  }



  cls.findAllForPackageAsync = function findAllForPackageAsync(callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }



  cls.exists = function exists(tileId) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="tileId" type="String">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


    cls.prototype.addListener = function addListener(eventName, callback){}
    cls.prototype.removeListener = function removeListener(eventName, callback){}
    cls.prototype.on = function on(eventName, callback){}
    cls.prototype.off = function off(eventName, callback){}
  return cls;
}) ();
exports.SecondaryTile = SecondaryTile;

VisualElementsRequestedEventArgs = (function () {
  var cls = function VisualElementsRequestedEventArgs() {
    this.request = new VisualElementsRequest();
  };
  

  return cls;
}) ();
exports.VisualElementsRequestedEventArgs = VisualElementsRequestedEventArgs;

VisualElementsRequest = (function () {
  var cls = function VisualElementsRequest() {
    this.alternateVisualElements = new Object();
    this.deadline = new Date();
    this.visualElements = new SecondaryTileVisualElements();
  };
  

  cls.prototype.getDeferral = function getDeferral() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="VisualElementsRequestDeferral" />
    /// </signature>
    return new VisualElementsRequestDeferral();
  }


  return cls;
}) ();
exports.VisualElementsRequest = VisualElementsRequest;

VisualElementsRequestDeferral = (function () {
  var cls = function VisualElementsRequestDeferral() {
  };
  

  cls.prototype.complete = function complete() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// </signature>
  }


  return cls;
}) ();
exports.VisualElementsRequestDeferral = VisualElementsRequestDeferral;

StartScreenManager = (function () {
  var cls = function StartScreenManager() {
    this.user = new Object();
  };
  

  cls.prototype.containsAppListEntryAsync = function containsAppListEntryAsync(appListEntry, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="appListEntry" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.requestAddAppListEntryAsync = function requestAddAppListEntryAsync(appListEntry, callback) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="appListEntry" type="Object">A param.</param>
    /// </signature>
  }


  cls.prototype.supportsAppListEntry = function supportsAppListEntry(appListEntry) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="appListEntry" type="Object">A param.</param>
    /// <returns type="Boolean" />
    /// </signature>
    return new Boolean();
  }


  cls.getDefault = function getDefault() {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <returns type="StartScreenManager" />
    /// </signature>
    return new StartScreenManager();
  }


  cls.getForUser = function getForUser(user) {
    /// <signature>
    /// <summary>Function summary.</summary>
    /// <param name="user" type="Object">A param.</param>
    /// <returns type="StartScreenManager" />
    /// </signature>
    return new StartScreenManager();
  }


  return cls;
}) ();
exports.StartScreenManager = StartScreenManager;

